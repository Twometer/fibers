{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Fibers is a fast and simple message bus and relay server for JSON messages. A single fiber is essentially a message bus, but it can be configured to do different things, depending on its operating mode . To get started with installing the Fibers server, check out the usage documentation .","title":"Overview"},{"location":"#overview","text":"Fibers is a fast and simple message bus and relay server for JSON messages. A single fiber is essentially a message bus, but it can be configured to do different things, depending on its operating mode . To get started with installing the Fibers server, check out the usage documentation .","title":"Overview"},{"location":"endpoints/","text":"Endpoints This page describes which endpoints and protocols the Fibers server exposes Format For each fiber, the server generates an endpoint that supports POST requests and WebSocket connections, in the following format: http://fiber-server:port/fiber-name/push ws://fiber-server:port/fiber-name/stream All requests made to such endpoints require an Authorization header with the X-FiberAuth scheme, supplying the access key for that fiber, like this: Authorization: X-FiberAuth key Errors The following HTTP errors can occur when connecting to any such endpoint: Error Code Description 404 Not Found The requested fiber does not exist 403 Access Denied The supplied access key is not valid for this fiber 401 Unauthorized The request is missing an access key 504 Gateway Timeout No subscriber replied to the relay before the timeout","title":"Endpoints"},{"location":"endpoints/#endpoints","text":"This page describes which endpoints and protocols the Fibers server exposes","title":"Endpoints"},{"location":"endpoints/#format","text":"For each fiber, the server generates an endpoint that supports POST requests and WebSocket connections, in the following format: http://fiber-server:port/fiber-name/push ws://fiber-server:port/fiber-name/stream All requests made to such endpoints require an Authorization header with the X-FiberAuth scheme, supplying the access key for that fiber, like this: Authorization: X-FiberAuth key","title":"Format"},{"location":"endpoints/#errors","text":"The following HTTP errors can occur when connecting to any such endpoint: Error Code Description 404 Not Found The requested fiber does not exist 403 Access Denied The supplied access key is not valid for this fiber 401 Unauthorized The request is missing an access key 504 Gateway Timeout No subscriber replied to the relay before the timeout","title":"Errors"},{"location":"messages/","text":"Messages The system is designed to work with JSON messages, binary data does not work directly and must be encoded to Base64 before sending the message. Publishing You can always publish messages to a fiber by sending a POST request to its endpoint. The body can directly contain your message's content. If the POST request was made to a fiber operating in relay mode, the response payload of the subscriber is directly returned in the HTTP response. To publish a message, just send a POST request to the fiber's publish endpoint with the POST body containing your message payload. Simplex Fibers will return a 200 response on success, duplex fibers will return the subscriber's reply in the HTTP response. When connected to the WebSocket endpoint of a fiber operating in bus mode (This does not work with relay-mode fibers), you can directly publish messages using the WebSocket, by sending the message in the following format: { \"id\": \"<random uuid>\", \"type\": \"publish\", \"payload\": {} } The payload can be any JSON object you want to send. Subscribing Subscribing to a fiber can be a little more complex, depending on the fiber type: Message format Subscribers receive messages from publishers in the following format: { \"id\": \"<random uuid>\", \"type\": \"publish\", \"payload\": {} } Replying on relay fibers When subscribing to a relay fiber, such a message should be replied to on the WebSocket with a message in the following format: { \"id\": \"<request uuid>\", \"type\": \"response\", \"payload\": {} } The payload object will be returned to the publisher. Handling keepalives The fiber server will regularly check in on the fiber subscribers in order to detect broken connections and keeping working connections alive. The server will send requests in the following format: { \"id\": \"<random uuid>\", \"type\": \"ping\" } Note the missing payload. A compliant subscriber should reply with type pong and the same message id as the request.","title":"Messages"},{"location":"messages/#messages","text":"The system is designed to work with JSON messages, binary data does not work directly and must be encoded to Base64 before sending the message.","title":"Messages"},{"location":"messages/#publishing","text":"You can always publish messages to a fiber by sending a POST request to its endpoint. The body can directly contain your message's content. If the POST request was made to a fiber operating in relay mode, the response payload of the subscriber is directly returned in the HTTP response. To publish a message, just send a POST request to the fiber's publish endpoint with the POST body containing your message payload. Simplex Fibers will return a 200 response on success, duplex fibers will return the subscriber's reply in the HTTP response. When connected to the WebSocket endpoint of a fiber operating in bus mode (This does not work with relay-mode fibers), you can directly publish messages using the WebSocket, by sending the message in the following format: { \"id\": \"<random uuid>\", \"type\": \"publish\", \"payload\": {} } The payload can be any JSON object you want to send.","title":"Publishing"},{"location":"messages/#subscribing","text":"Subscribing to a fiber can be a little more complex, depending on the fiber type:","title":"Subscribing"},{"location":"messages/#message-format","text":"Subscribers receive messages from publishers in the following format: { \"id\": \"<random uuid>\", \"type\": \"publish\", \"payload\": {} }","title":"Message format"},{"location":"messages/#replying-on-relay-fibers","text":"When subscribing to a relay fiber, such a message should be replied to on the WebSocket with a message in the following format: { \"id\": \"<request uuid>\", \"type\": \"response\", \"payload\": {} } The payload object will be returned to the publisher.","title":"Replying on relay fibers"},{"location":"messages/#handling-keepalives","text":"The fiber server will regularly check in on the fiber subscribers in order to detect broken connections and keeping working connections alive. The server will send requests in the following format: { \"id\": \"<random uuid>\", \"type\": \"ping\" } Note the missing payload. A compliant subscriber should reply with type pong and the same message id as the request.","title":"Handling keepalives"},{"location":"operating_modes/","text":"Operating modes A single fiber can be configured to operate in one of these two modes: Bus Mode Bus mode is for messages that only require a simple message bus, to which anyone can publish messages that are forwarded to everyone who is subscribed to the bus. A client subscribes to a bus-mode fiber using the WebSocket endpoint. Messages can be published either by sending it to the WebSocket or by POSTing it to the HTTP endpoint. Relay Mode The relay mode is for messages that each require a response from one of the subscribers. When you publish a message to a relay-mode fiber, the server broadcasts it to all subscribers. It then waits for any one of the subscribers to return a response with the same message ID. The first subscriber that responds gets its response message returned back to the publisher. Messages that are not answered by any subscriber after a configurable timeout are dropped and the publisher receives a 504 Gateway Timeout response. Note that relay mode does not support publishing by WebSocket. Only the POST-endpoint can be used for publishing messages.","title":"Operating modes"},{"location":"operating_modes/#operating-modes","text":"A single fiber can be configured to operate in one of these two modes:","title":"Operating modes"},{"location":"operating_modes/#bus-mode","text":"Bus mode is for messages that only require a simple message bus, to which anyone can publish messages that are forwarded to everyone who is subscribed to the bus. A client subscribes to a bus-mode fiber using the WebSocket endpoint. Messages can be published either by sending it to the WebSocket or by POSTing it to the HTTP endpoint.","title":"Bus Mode"},{"location":"operating_modes/#relay-mode","text":"The relay mode is for messages that each require a response from one of the subscribers. When you publish a message to a relay-mode fiber, the server broadcasts it to all subscribers. It then waits for any one of the subscribers to return a response with the same message ID. The first subscriber that responds gets its response message returned back to the publisher. Messages that are not answered by any subscriber after a configurable timeout are dropped and the publisher receives a 504 Gateway Timeout response. Note that relay mode does not support publishing by WebSocket. Only the POST-endpoint can be used for publishing messages.","title":"Relay Mode"},{"location":"usage/","text":"Usage The Fibers server is designed to be run using docker. It runs on the official node base image. Setup No external dependencies are required to run it. However, you will want to mount the /app/config directory to change and persist the configuration files. For security reasons, it is also strongly recommended running the server behind a NGINX reverse proxy with TLS encryption enabled on the WebSocket and HTTP endpoints. Configuration There are two configurations for the Fibers server: Fiber definition Fibers are defined in the /app/config/fibers.json file that you mounted previously, which has the following structure: [ { \"mode\": \"bus|relay\", \"name\": \"fiber-name\", \"key\": \"choose a secure key\" } ] Server config The server is configured using environment variables that you can pass to your Docker container: Key Description FIBER_WEB_PORT The port on which the HTTP and WebSocket server should listen FIBER_MSG_TIMEOUT Timeout after which relay messages are dropped. See here for more info. KEEPALIVE_INTERVAL Interval in which keepalive (ping) messages are sent to subscribers. Note : All time values must be given in milliseconds","title":"Usage"},{"location":"usage/#usage","text":"The Fibers server is designed to be run using docker. It runs on the official node base image.","title":"Usage"},{"location":"usage/#setup","text":"No external dependencies are required to run it. However, you will want to mount the /app/config directory to change and persist the configuration files. For security reasons, it is also strongly recommended running the server behind a NGINX reverse proxy with TLS encryption enabled on the WebSocket and HTTP endpoints.","title":"Setup"},{"location":"usage/#configuration","text":"There are two configurations for the Fibers server:","title":"Configuration"},{"location":"usage/#fiber-definition","text":"Fibers are defined in the /app/config/fibers.json file that you mounted previously, which has the following structure: [ { \"mode\": \"bus|relay\", \"name\": \"fiber-name\", \"key\": \"choose a secure key\" } ]","title":"Fiber definition"},{"location":"usage/#server-config","text":"The server is configured using environment variables that you can pass to your Docker container: Key Description FIBER_WEB_PORT The port on which the HTTP and WebSocket server should listen FIBER_MSG_TIMEOUT Timeout after which relay messages are dropped. See here for more info. KEEPALIVE_INTERVAL Interval in which keepalive (ping) messages are sent to subscribers. Note : All time values must be given in milliseconds","title":"Server config"}]}